"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepsRouter = void 0;
const express_1 = __importDefault(require("express"));
const steps_1 = require("../../services/steps");
const router = express_1.default.Router();
exports.StepsRouter = router;
/**
 * @swagger
 * components:
 *  schemas:
 *    Step:
 *      type: object
 *      properties:
 *        id:
 *          type: string
 *          description: The autogenerated id of the step.
 *        description:
 *          type: string
 *          description: The instructions of the step.
 *        lessonId:
 *          type: string
 *          description: The id of the existing lesson that uses this step.
 *        template:
 *          $ref: '#/components/schemas/Template'
 *        solution:
 *          $ref: '#/components/schemas/Solution'
 *      required:
 *        - description
 *        - lessonId
 *      examples:
 *        id: 63158ff83cd164cc4fda4282
 *        description: Print \"Hello world!\"
 *        lessonId: 6314112d7ceeeb5338fdd955
 *        template:
 *          id: 63158ff83cd164cc4fda4281
 *          name: main.py
 *          content: print(\"Hello!\")
 *          updateAt: 2022-09-04T07:18:20.250Z
 *          stepId: 63158ff83cd164cc4fda4282
 *        solution:
 *          id: 63158ff83cd164cc4fda4281
 *          name: main.py
 *          content: print(\"Hello world!\")
 *          updateAt: 2022-09-04T07:18:20.250Z
 *          stepId: 63158ff83cd164cc4fda4282
 *  parameters:
 *    stepId:
 *      in: path
 *      name: id
 *      required: true
 *      schema:
 *        type: string
 *      description: The step id.
 *
 * tags:
 *  name: Steps
 *  description: Steps endpoint.
 */
// GET
/**
 * @swagger
 * /steps:
 *  get:
 *    summary: Get all steps.
 *    tags: [Steps]
 *    responses:
 *      200:
 *        description: All the steps.
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Step'
 *      400:
 *        description: An error occurred due to a bad request.
 */
router.route("/").get((req, res) => {
    (0, steps_1.getSteps)()
        .then((v) => {
        res.status(200);
        res.send(v);
    })
        .catch((e) => {
        res.status(400);
        res.send(e);
    });
});
/**
 * @swagger
 * /steps/{id}:
 *  get:
 *    summary: Get a step by id.
 *    tags: [Steps]
 *    parameters:
 *      - $ref: '#/components/parameters/stepId'
 *    responses:
 *      200:
 *        description: The step.
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Step'
 *      400:
 *        description: An error occurred due to a bad request.
 */
router.route("/:id").get((req, res) => {
    (0, steps_1.getStep)(req.params.id)
        .then((v) => {
        res.status(200);
        res.send(v);
    })
        .catch((e) => {
        res.status(400);
        res.send(e);
    });
});
// POST
/**
 * @swagger
 * /steps:
 *  post:
 *    summary: Create a step.
 *    tags: [Steps]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Step'
 *    responses:
 *      200:
 *        description: The created step.
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Step'
 *      400:
 *        description: An error occurred due to a bad request.
 */
router.route("/").post((req, res) => {
    (0, steps_1.createStep)(req.body)
        .then((v) => {
        res.status(201);
        res.send(v);
    })
        .catch((e) => {
        res.status(400);
        res.send(e);
    });
});
// PUT
/**
 * @swagger
 * /steps/{id}:
 *  put:
 *    summary: Update a step by id.
 *    tags: [Steps]
 *    parameters:
 *      - $ref: '#/components/parameters/stepId'
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Step'
 *    responses:
 *      200:
 *        description: The updated step.
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Step'
 *      400:
 *        description: An error occurred due to a bad request.
 */
router.route("/:id").put((req, res) => {
    (0, steps_1.updateStep)(req.params.id, req.body)
        .then((v) => {
        res.status(200);
        res.send(v);
    })
        .catch((e) => {
        console.log(e);
        res.status(400);
        res.send(e);
    });
});
// DELETE
/**
 * @swagger
 * /steps/{id}:
 *  delete:
 *    summary: Delete a step by id.
 *    tags: [Steps]
 *    parameters:
 *      - $ref: '#/components/parameters/stepId'
 *    responses:
 *      200:
 *        description: The deleted step.
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Step'
 *      400:
 *        description: An error occurred due to a bad request.
 */
router.route("/:id").delete((req, res) => {
    (0, steps_1.deleteStep)(req.params.id)
        .then((v) => {
        res.status(204);
        res.send(v);
    })
        .catch((e) => {
        res.status(400);
        res.send(e);
    });
});
//# sourceMappingURL=steps.js.map